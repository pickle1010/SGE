@page "/editar-usuario/{id:int}"
@rendermode InteractiveServer
@inject IServicioGestionDeSesion ServicioGestionDeSesion
@inject CasoDeUsoUsuarioConsultarPorId CasoDeUsoUsuarioConsultarPorId
@inject CasoDeUsoUsuarioModificacion CasoDeUsoUsuarioModificacion
@inject CasoDeUsoUsuarioEditarPerfil CasoDeUsoUsuarioEditarPerfil
@inject NavigationManager Navegador

@if (!usuarioAutorizado)
{
    <h3>Acceso denegado</h3>
    <p>No tienes permiso para ver este contenido.</p>
}
else
{
    @if (editandoPerfil)
    {
        <PageTitle>SGE - Editar Mi Perfil</PageTitle>
        <h3>Editar Mi Perfil</h3>
    }
    else
    {
        <PageTitle>SGE - Editar Usuario</PageTitle>
        <h3>Editar Usuario</h3>
        <h4>Modificando al Usuario "@_usuario.Nombre"</h4>
    }

    <EditForm Model="@_edited_user" OnValidSubmit="ModificarUsuarioValido">
        <div class="mb-3">
            <label for="nombre" class="form-label">Nombre:</label>
            <InputText id="nombre" class="form-control" @bind-Value="_edited_user.Nombre" />
        </div>
        <div class="mb-3">
            <label for="apellido" class="form-label">Apellido:</label>
            <InputText id="apellido" class="form-control" @bind-Value="_edited_user.Apellido" />
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Correo Electrónico:</label>
            <InputText id="email" class="form-control" @bind-Value="_edited_user.Email" />
        </div>
        <div class="mb-3">
            <label for="contraseña" class="form-label">Contraseña:</label>
            <InputText id="contraseña" type="password" class="form-control" @bind-Value="_edited_user.Contraseña" />
        </div>
        @if (!editandoPerfil)
        {
            <div class="form-group">
                <label>Permisos:</label>
                @foreach (var permiso in permisosDisponibles)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="@permiso" checked="@isChecked[(int)permiso]" @onchange="(e) => ActualizarPermiso(permiso, e)">
                        @permiso.ToString()
                    </div>
                }
            </div>
        }
        <button type="submit" class="btn btn-primary">Guardar cambios</button>
    </EditForm>
}

@code {
    private bool usuarioAutorizado = false;
    private Usuario _usuario = new Usuario();
    private EditUserModel _edited_user = new EditUserModel();
    private Usuario? _session_user;
    private bool passwordCambiada = false;
    private bool editandoPerfil = false;
    [Parameter] public int id { get; set; }

    private Permiso[] permisosDisponibles;
    private bool[] isChecked;

    protected override void OnInitialized()
    {
        _session_user = ServicioGestionDeSesion.ObtenerUsuario();
        usuarioAutorizado = _session_user != null;

        if (usuarioAutorizado)
        {
            try
            {
                _usuario = CasoDeUsoUsuarioConsultarPorId.Ejecutar(id);
                usuarioAutorizado = usuarioAutorizado && (_session_user.EsAdmin || _session_user.Id == _usuario.Id);

                if (usuarioAutorizado)
                {
                    _edited_user.Nombre = _usuario.Nombre;
                    _edited_user.Apellido = _usuario.Apellido;
                    _edited_user.Email = _usuario.Email;
                    editandoPerfil = (_session_user.Id == _usuario.Id);

                    if(!editandoPerfil)
                    {
                        permisosDisponibles = Enum.GetValues(typeof(Permiso)).Cast<Permiso>().ToArray();
                        isChecked = new bool[permisosDisponibles.Length];
                        for (int i = 0; i < permisosDisponibles.Length; i++)
                        {
                            isChecked[i] = _usuario.Permisos.Contains(permisosDisponibles[i]);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Error al cargar el usuario: " + e.Message);
                usuarioAutorizado = false;
            }
        }
    }

    private void ActualizarPermiso(Permiso permiso, ChangeEventArgs e)
    {
        isChecked[(int)permiso] = (bool)e.Value;
    }

    private void ModificarUsuarioValido()
    {
        passwordCambiada = (_edited_user.Contraseña != null);
        _usuario.Nombre = _edited_user.Nombre;
        _usuario.Apellido = _edited_user.Apellido;
        _usuario.Email = _edited_user.Email;

        if (passwordCambiada)
        {
            _usuario.Contraseña = _edited_user.Contraseña;
        }

        if(!editandoPerfil)
        {
            _usuario.Permisos = new List<Permiso>();
            for (int i = 0; i < isChecked.Length; i++)
            {
                if (isChecked[i])
                {
                    _usuario.Permisos.Add(permisosDisponibles[i]);
                }
            }
        }

        try
        {
            if (editandoPerfil)
            {
                CasoDeUsoUsuarioEditarPerfil.Ejecutar(_usuario, _session_user.Id, passwordCambiada);
            }
            else
            {
                CasoDeUsoUsuarioModificacion.Ejecutar(_usuario, _session_user.Id, passwordCambiada);
            }

            if(editandoPerfil)
            {
                Navegador.NavigateTo("/miperfil");
            }
            else{
                Navegador.NavigateTo("/usuarios");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Usuario Invalido: " + e.Message);
        }
    }

    private class EditUserModel
    {
        public string? Nombre { get; set; }
        public string? Apellido { get; set; }
        public string? Email { get; set; }
        public string? Contraseña { get; set; }
    }
}
